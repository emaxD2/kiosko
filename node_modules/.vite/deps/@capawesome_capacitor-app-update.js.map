{
  "version": 3,
  "sources": ["../../@capawesome/capacitor-app-update/src/definitions.ts", "../../@capawesome/capacitor-app-update/src/index.ts"],
  "sourcesContent": ["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface AppUpdatePlugin {\n  /**\n   * Returns app update informations.\n   *\n   * Only available on Android and iOS.\n   */\n  getAppUpdateInfo(options?: GetAppUpdateInfoOptions): Promise<AppUpdateInfo>;\n  /**\n   * Opens the app store entry of the app in the Play Store (Android) or App Store (iOS).\n   *\n   * Only available on Android and iOS.\n   */\n  openAppStore(options?: OpenAppStoreOptions): Promise<void>;\n  /**\n   * Performs an immediate in-app update.\n   *\n   * Only available on Android.\n   */\n  performImmediateUpdate(): Promise<AppUpdateResult>;\n  /**\n   * Starts a flexible in-app update.\n   *\n   * Only available on Android.\n   */\n  startFlexibleUpdate(): Promise<AppUpdateResult>;\n  /**\n   * Completes a flexible in-app update by restarting the app.\n   *\n   * Only available on Android.\n   */\n  completeFlexibleUpdate(): Promise<void>;\n  /**\n   * Adds a flexbile in-app update state change listener.\n   *\n   * Only available on Android.\n   */\n  addListener(\n    eventName: 'onFlexibleUpdateStateChange',\n    listenerFunc: (state: FlexibleUpdateState) => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface GetAppUpdateInfoOptions {\n  /**\n   *  The two-letter country code for the store you want to search.\n   *  See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for a list of ISO Country Codes.\n   *\n   *  Only available on iOS.\n   */\n  country?: string;\n}\n\nexport interface AppUpdateInfo {\n  /**\n   * The current version name of the app.\n   *\n   * On **Android**, this is the `versionName` from the `android/app/build.gradle` file.\n   * On **iOS**, this is the `CFBundleShortVersionString` from the `Info.plist` file.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 5.1.0\n   * @example \"1.0.0\"\n   */\n  currentVersionName: string;\n  /**\n   * The available version name of the update.\n   *\n   * On **iOS**, this is the `CFBundleShortVersionString` from the `Info.plist` file.\n   *\n   * Only available on iOS.\n   *\n   * @since 5.1.0\n   * @example \"1.1.0\"\n   */\n  availableVersionName?: string;\n  /**\n   * The current version code of the app.\n   *\n   * On **Android**, this is the `versionCode` from the `android/app/build.gradle` file.\n   * On **iOS**, this is the `CFBundleVersion` from the `Info.plist` file.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 5.1.0\n   * @example \"1\"\n   */\n  currentVersionCode: string;\n  /**\n   * The available version code of the update.\n   *\n   * On **Android**, this is the `versionCode` from the `android/app/build.gradle` file.\n   *\n   * Only available on Android.\n   *\n   * @since 5.1.0\n   * @example \"2\"\n   */\n  availableVersionCode?: string;\n  /**\n   * Release date of the update in ISO 8601 (UTC) format.\n   *\n   * Only available on iOS.\n   */\n  availableVersionReleaseDate?: string;\n  /**\n   * The app update availability.\n   *\n   * Only available on Android and iOS.\n   */\n  updateAvailability: AppUpdateAvailability;\n  /**\n   * In-app update priority for this update, as defined by the developer in the Google Play Developer API.\n   *\n   * Only available on Android.\n   */\n  updatePriority?: number;\n  /**\n   * `true` if an immediate update is allowed, otherwise `false`.\n   *\n   * Only available on Android.\n   */\n  immediateUpdateAllowed?: boolean;\n  /**\n   * `true` if a flexible update is allowed, otherwise `false`.\n   *\n   * Only available on Android.\n   */\n  flexibleUpdateAllowed?: boolean;\n  /**\n   * Number of days since the Google Play Store app on the user's device has learnt about an available update if an update is available or in progress.\n   *\n   * Only available on Android.\n   */\n  clientVersionStalenessDays?: number;\n  /**\n   * Flexible in-app update install status.\n   *\n   * Only available on Android.\n   */\n  installStatus?: FlexibleUpdateInstallStatus;\n  /**\n   * The minimum version of the operating system required for the app to run in iOS.\n   *\n   * Only available on iOS.\n   */\n  minimumOsVersion?: string;\n}\n\nexport enum AppUpdateAvailability {\n  UNKNOWN = 0,\n  UPDATE_NOT_AVAILABLE = 1,\n  UPDATE_AVAILABLE = 2,\n  UPDATE_IN_PROGRESS = 3,\n}\n\nexport interface OpenAppStoreOptions {\n  /**\n   * The app ID of the app to open in the App Store.\n   *\n   * On **iOS**, this is the Apple ID of your app (e.g. `123456789`).\n   *\n   * Only available on iOS.\n   *\n   * @since 6.1.0\n   * @example 123456789\n   */\n  appId?: string;\n  /**\n   * The two-letter country code for the store you want to search.\n   * See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for a list of ISO Country Codes.\n   *\n   * Only available on iOS.\n   *\n   * @deprecated Use `appId` instead.\n   */\n  country?: string;\n}\n\nexport interface FlexibleUpdateState {\n  /**\n   * Flexible in-app update install status.\n   */\n  installStatus: FlexibleUpdateInstallStatus;\n  /**\n   * Returns the number of bytes downloaded so far.\n   * `undefined` if the install status is other than `DOWNLOADING`.\n   */\n  bytesDownloaded: number | undefined;\n  /**\n   * Returns the total number of bytes to be downloaded for this update.\n   * `undefined` if the install status is other than `DOWNLOADING`.\n   */\n  totalBytesToDownload: number | undefined;\n}\n\nexport enum FlexibleUpdateInstallStatus {\n  UNKNOWN = 0,\n  PENDING = 1,\n  DOWNLOADING = 2,\n  INSTALLING = 3,\n  INSTALLED = 4,\n  FAILED = 5,\n  CANCELED = 6,\n  DOWNLOADED = 11,\n}\n\nexport interface AppUpdateResult {\n  code: AppUpdateResultCode;\n}\n\nexport enum AppUpdateResultCode {\n  /**\n   * The user has accepted the update.\n   */\n  OK = 0,\n  /**\n   * The user has denied or cancelled the update.\n   */\n  CANCELED = 1,\n  /**\n   * Some other error prevented either the user from providing consent or the update to proceed.\n   */\n  FAILED = 2,\n  /**\n   * No update available.\n   */\n  NOT_AVAILABLE = 3,\n  /**\n   * Update type not allowed.\n   */\n  NOT_ALLOWED = 4,\n  /**\n   * App update info missing.\n   * You must call `getAppUpdateInfo()` before requesting an update.\n   */\n  INFO_MISSING = 5,\n}\n", "import { registerPlugin } from '@capacitor/core';\n\nimport type { AppUpdatePlugin } from './definitions';\n\nconst AppUpdate = registerPlugin<AppUpdatePlugin>('AppUpdate', {\n  web: () => import('./web').then(m => new m.AppUpdateWeb()),\n});\n\nexport * from './definitions';\nexport { AppUpdate };\n"],
  "mappings": ";;;;;;AA2JA,IAAY;CAAZ,SAAYA,wBAAqB;AAC/B,EAAAA,uBAAAA,uBAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,sBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,oBAAA,IAAA,CAAA,IAAA;AACF,GALY,0BAAA,wBAAqB,CAAA,EAAA;AA+CjC,IAAY;CAAZ,SAAYC,8BAA2B;AACrC,EAAAA,6BAAAA,6BAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,YAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,QAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,UAAA,IAAA,CAAA,IAAA;AACA,EAAAA,6BAAAA,6BAAA,YAAA,IAAA,EAAA,IAAA;AACF,GATY,gCAAA,8BAA2B,CAAA,EAAA;AAevC,IAAY;CAAZ,SAAYC,sBAAmB;AAI7B,EAAAA,qBAAAA,qBAAA,IAAA,IAAA,CAAA,IAAA;AAIA,EAAAA,qBAAAA,qBAAA,UAAA,IAAA,CAAA,IAAA;AAIA,EAAAA,qBAAAA,qBAAA,QAAA,IAAA,CAAA,IAAA;AAIA,EAAAA,qBAAAA,qBAAA,eAAA,IAAA,CAAA,IAAA;AAIA,EAAAA,qBAAAA,qBAAA,aAAA,IAAA,CAAA,IAAA;AAKA,EAAAA,qBAAAA,qBAAA,cAAA,IAAA,CAAA,IAAA;AACF,GA1BY,wBAAA,sBAAmB,CAAA,EAAA;;;ACrN/B,IAAM,YAAY,eAAgC,aAAa;EAC7D,KAAK,MAAM,OAAO,mBAAO,EAAE,KAAK,OAAK,IAAI,EAAE,aAAY,CAAE;CAC1D;",
  "names": ["AppUpdateAvailability", "FlexibleUpdateInstallStatus", "AppUpdateResultCode"]
}
